@page "/plans/details/{Id}"

@inject PlansService plansService
@inject IFileReaderService fileRenderService
@inject NavigationManager navigationManager
@inject ToDoItemService todoItemService

@attribute [Authorize]
<AlertMessage Message="@message" MessageType="@messageType" />
<h3>Plan @model.Title</h3>

<div class="row">
    <div class="col-6">
        <EditForm Model="model" OnValidSubmit="editPlanAsync">
            
            <DataAnnotationsValidator />
            <ValidationSummary />
            <RadzenCard>
                <RadzenTextBox @bind-Value="model.Title" 
                               Placeholder="Title" 
                               Style="margin:10px" 
                               />
                <RadzenTextBox @bind-Value="model.Description" 
                               Placeholder="Description" 
                               Style="margin:10px" 
                               />
                <input type="file" 
                       @ref="_inputElementReference" 
                       style="margin:10px" 
                       @onchange="async () => await choseFileAsync()"
                       />
                <img src="@imageContent"
                     style="width:100%;margin:10px" 
                     />

                <hr />

                <RadzenButton class="btn btn-block"
                              Text="Edit"
                              ButtonStyle="Radzen.ButtonStyle.Success"
                              ButtonType="Radzen.ButtonType.Submit"
                              Style="margin: 5px"
                              Disabled="isBysy" />
            </RadzenCard>
        </EditForm>
    </div>
    <div class="col-6">
        <RadzenCard>
            <h2>Plans Items.</h2>
            <EditForm Model="itemModel" OnValidSubmit="submitItemAsync">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <table>
                    <tr>
                        <td>
                            <RadzenButton Text="+"
                                          Click="clearSelection"
                                          ButtonStyle="Radzen.ButtonStyle.Secondary"
                                          ButtonType="Radzen.ButtonType.Button" />
                        </td>
                        <td>
                            <RadzenTextBox Placeholder="Item Description..."
                                           @bind-Value="itemModel.Description" 
                                           />
                        </td>
                        <td>
                            <RadzenButton Text="Submit"
                                          ButtonStyle="Radzen.ButtonStyle.Success"
                                          ButtonType="Radzen.ButtonType.Submit"
                                          Disabled="isBysy"
                                          />
                        </td>
                    </tr>
                    @foreach (var item in items)
                    {
                        string descriptionStyle = item.IsDone? "text-decoration-line: line-through" : "text-decoration-line: none";
                        string rowStyle = selectedItem == item ? "cursor:pointer; background:lightblue" : "cursor: pointer; background:white";

                        <tr style="@rowStyle" @onclick="() => SelectedItem(item)">
                            <td>
                            <RadzenCheckBox @bind-Value="item.IsDone" 
                                            @onclick="async () => await changeItemStatusAsync(item.Id)"
                                            Disabled="isBysy"
                                            />
                            </td>
                            <td>
                                <span style="@descriptionStyle">@item.Description</span>
                            </td>
                            <td>
                            <RadzenButton Text="-"
                                      Click="async () => await removeItem(item)"
                                      Disabled="isBysy"
                                      ButtonStyle="Radzen.ButtonStyle.Danger"
                                      ButtonType="Radzen.ButtonType.Button" />
                            </td>

                            </tr>
                    }
                </table>

            </EditForm>
        </RadzenCard>
    </div>
</div>

@code {
    //getting auth state
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public string Id { get; set; }

    PlanRequest model = new PlanRequest();
    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;
    ElementReference _inputElementReference;

    bool isBysy = false;

    //alert
    string message = String.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;


    async Task choseFileAsync()
    {
        var file = (await fileRenderService.CreateReference(_inputElementReference).EnumerateFilesAsync()).FirstOrDefault();

        var fileInfo = await file.ReadFileInfoAsync();

        //set file name
        fileName = fileInfo.Name;

        string extension = System.IO.Path.GetExtension(fileInfo.Name);
        var allowedExtensions = new string[] { ".jpeg", ".jpg", ".png", ".bmp" };

        if (!allowedExtensions.Contains(extension))
        {
            message = "The chosen file is not a valid image file";
            messageType = Models.AlertMessageType.Error;
            return;
        }
        message = null;

        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
            imageContent = $"data:{fileInfo.Type};base64, { Convert.ToBase64String(memoryStream.ToArray())}";
        }

    }

    async Task editPlanAsync()
    {
        isBysy = true;

        model.CoverFile = fileStream;
        model.FileName = fileName;
        var result = await plansService.PostPlanAsync(model);

        if (result.IsSuccess)
        {
            message = "Plan edited successfully";
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBysy = false;
    }

    async Task GetPlanById()
    {
        isBysy = true;

        var result = await plansService.GetPlansByIdAsync(Id);
        if (result.IsSuccess)
        {
            model.Title = result.Record.Title;
            model.Description = result.Record.Description;
            imageContent = result.Record.CoverPath;
            model.Id = Id;
            items = result.Record.ToDoItems.ToList(); //setting todo items for the user.
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBysy = false;
    }

    protected async override Task OnInitializedAsync()
    {
        var userState = authenticationState.Result;
        string AccessToken = userState.User.FindFirst("AccessToken").Value;
        plansService.AccessToken = AccessToken;
        todoItemService.AccessToken = AccessToken;

        await GetPlanById();
    }


    #region Items

    List<ToDoItem> items = new List<ToDoItem>();
    ToDoItem selectedItem = null;

    TodoItemRequest itemModel = new TodoItemRequest();

    //edit items
    async Task editItemAsync()
    {
        isBysy = true;
        itemModel.PlanId = Id;
        var result = await todoItemService.EditItemAsync(itemModel);
        if (result.IsSuccess)
        {
            message = "Item added successfully";
            messageType = Models.AlertMessageType.Success;

            var editedItem = items.SingleOrDefault(i => i.Id == result.Record.Id);
            editedItem.Description = result.Record.Description;

        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBysy = false;
    }

    //Add items
    async Task insertItemAsync()
    {
        isBysy = true;
        itemModel.PlanId = Id;
        var result = await todoItemService.CreateItemAsync(itemModel);
        if (result.IsSuccess)
        {
            message = "Item added successfully";
            messageType = Models.AlertMessageType.Success;

            items.Add(result.Record);

        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBysy = false;
    }
    async Task submitItemAsync()
    {
        if (selectedItem == null)
        {
            await insertItemAsync();
        }
        else
        {
            await editItemAsync();
        }
    }
    // Update status of item.
    async Task changeItemStatusAsync(string itemId)
    {
        isBysy = true;
        var result = await todoItemService.ChangedItemStateAsync(itemId);
        if (!result.IsSuccess)
        {
            //TODO: show error alrt message.
            message = "Something is wrong";
            messageType = Models.AlertMessageType.Warning;

        }
        isBysy = false;
    }
    void SelectedItem(ToDoItem item)
    {
        selectedItem = item;
        itemModel.Id = item.Id;
        itemModel.Description = item.Description;
    }
    void clearSelection()
    {
        selectedItem = null;
        itemModel.Id = null;
        itemModel.Description = null;
        //TODO: show alert that the item cannot be edited if its cheched.
    }
    async Task removeItem(ToDoItem item)
    {
        isBysy = true;
        var result = await todoItemService.DeleteItemStateAsync(item.Id);
        if (result.IsSuccess)
        {
            items.Remove(item);
        }
        else
        {
            //TODO: show alert.
        }
        isBysy = false;
    }
    #endregion

}
